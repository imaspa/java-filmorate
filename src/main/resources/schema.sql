-- Таблица возрастных рейтингов MPA
CREATE TABLE IF NOT EXISTS MPA_RATING
(
    ID   INTEGER     NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(10) NOT NULL,
    CONSTRAINT PK_MPA_RATING PRIMARY KEY (ID),
    CONSTRAINT UQ_MPA_RATING_NAME UNIQUE (NAME)
);

-- Таблица жанров
CREATE TABLE IF NOT EXISTS GENRE
(
    ID   INTEGER     NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL,
    CONSTRAINT PK_GENRE PRIMARY KEY (ID),
    CONSTRAINT UQ_GENRE_NAME UNIQUE (NAME)
);

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS USERS
(
    ID       INTEGER      NOT NULL AUTO_INCREMENT,
    NAME     VARCHAR(60)  NOT NULL,
    LOGIN    VARCHAR(60)  NOT NULL,
    EMAIL    VARCHAR(200) NOT NULL,
    BIRTHDAY DATE         NOT NULL,
    CONSTRAINT PK_USERS PRIMARY KEY (ID),
    CONSTRAINT UQ_USERS_EMAIL UNIQUE (EMAIL),
    CONSTRAINT UQ_USERS_LOGIN UNIQUE (LOGIN)
);

-- Таблица фильмов
CREATE TABLE IF NOT EXISTS FILM
(
    ID           INTEGER      NOT NULL AUTO_INCREMENT,
    NAME         VARCHAR(100) NOT NULL,
    DESCRIPTION  VARCHAR(200),
    RELEASE_DATE DATE         NOT NULL,
    DURATION     INTEGER      NOT NULL,
    MPA_ID       INTEGER      NOT NULL,
    CONSTRAINT PK_FILM PRIMARY KEY (ID),
    CONSTRAINT FK_FILM_MPA FOREIGN KEY (MPA_ID) REFERENCES MPA_RATING (ID),
    CONSTRAINT CK_FILM_RELEASE_DATE CHECK (RELEASE_DATE >= '1895-12-28'),
    CONSTRAINT CK_FILM_DURATION CHECK (DURATION > 0)
);

-- Таблица связи фильмов и жанров
CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    CONSTRAINT PK_FILM_GENRE PRIMARY KEY (FILM_ID, GENRE_ID),
    CONSTRAINT FK_FILM_GENRE_FILM FOREIGN KEY (FILM_ID) REFERENCES FILM (ID) ON DELETE CASCADE,
    CONSTRAINT FK_FILM_GENRE_GENRE FOREIGN KEY (GENRE_ID) REFERENCES GENRE (ID) ON DELETE CASCADE
);

-- Таблица лайков фильмов
CREATE TABLE IF NOT EXISTS FILM_LIKE
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT PK_FILM_LIKE PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT FK_FILM_LIKE_FILM FOREIGN KEY (FILM_ID) REFERENCES FILM (ID) ON DELETE CASCADE,
    CONSTRAINT FK_FILM_LIKE_USER FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);

-- Таблица дружбы между пользователями
CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID   INTEGER NOT NULL,
    FRIEND_ID INTEGER NOT NULL,
    ISFRIEND  BOOLEAN DEFAULT FALSE,
    CONSTRAINT PK_FRIENDSHIP PRIMARY KEY (USER_ID, FRIEND_ID),
    CONSTRAINT FK_FRIENDSHIP_USER FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    CONSTRAINT FK_FRIENDSHIP_FRIEND FOREIGN KEY (FRIEND_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    CONSTRAINT CK_FRIENDSHIP_USERS CHECK (USER_ID <> FRIEND_ID)
);

-- Таблица отзывов о фильмах
CREATE TABLE IF NOT EXISTS REVIEW
(
    ID          INTEGER      NOT NULL AUTO_INCREMENT,
    USER_ID     INTEGER      NOT NULL,
    FILM_ID     INTEGER      NOT NULL,
    CONTENT     VARCHAR(255) NOT NULL,
    IS_POSITIVE BOOLEAN      NOT NULL,
    USEFUL      INTEGER      NOT NULL,
    CONSTRAINT PK_REVIEW PRIMARY KEY (ID),
    CONSTRAINT FK_REVIEW_USER FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    CONSTRAINT FK_REVIEW_FILM FOREIGN KEY (FILM_ID) REFERENCES FILM (ID) ON DELETE CASCADE
);

-- Таблица лайков и дизлайков отзывов о фильмах
CREATE TABLE IF NOT EXISTS REVIEW_LIKE
(
    USER_ID    INTEGER NOT NULL,
    REVIEW_ID  INTEGER NOT NULL,
    IS_DISLIKE BOOLEAN NOT NULL,
    CONSTRAINT PK_REVIEW_LIKE PRIMARY KEY (USER_ID, REVIEW_ID),
    CONSTRAINT FK_REVIEW_LIKE_USER FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    CONSTRAINT FK_REVIEW_LIKE_REVIEW FOREIGN KEY (REVIEW_ID) REFERENCES REVIEW (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DIRECTOR
(
    ID   INTEGER      NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(100) NOT NULL,
    CONSTRAINT PK_DIRECTOR PRIMARY KEY (ID),
    CONSTRAINT UQ_DIRECTOR_NAME UNIQUE (NAME)
);

CREATE TABLE IF NOT EXISTS FILM_DIRECTOR
(
    FILM_ID     INTEGER NOT NULL,
    DIRECTOR_ID INTEGER NOT NULL,
    CONSTRAINT PK_FILM_DIRECTOR PRIMARY KEY (FILM_ID, DIRECTOR_ID),
    CONSTRAINT FK_FILM_DIRECTOR_FILM FOREIGN KEY (FILM_ID) REFERENCES FILM (ID) ON DELETE CASCADE,
    CONSTRAINT FK_FILM_DIRECTOR_DIRECTOR FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTOR (ID) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS IDX_FILM_NAME ON FILM (NAME);
CREATE INDEX IF NOT EXISTS IDX_FILM_RELEASE_DATE ON FILM (RELEASE_DATE);
CREATE INDEX IF NOT EXISTS IDX_USERS_NAME ON USERS (NAME);
CREATE INDEX IF NOT EXISTS IDX_USERS_BIRTHDAY ON USERS (BIRTHDAY);
